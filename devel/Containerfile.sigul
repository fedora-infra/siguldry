# Available from quay.io/jeremycline/sigul-pesign-bridge-ci:latest
#
# To use this, start a client container in the same network as the bridge and server:
#
#   $ podman compose up -d
#   $ podman run --name sigul-client --network sigul-pesign-client_default --rm -it \
#       quay.io/jeremycline/sigul-pesign-bridge-ci:latest
#   # sigul_key_setup
#   # printf "my-signing-password\0" | sigul --batch -v -v sign-pe -o grub.signed.efi \
#       signing-key codesigning grubx64.efi

FROM quay.io/almalinuxorg/almalinux:9

RUN dnf install -y epel-release
RUN dnf install -y \
    cargo \
    gcc \
    iproute \
    nss-tools \
    opensc \
    openssl-pkcs11 \
    openssl-devel \
    patch \
    pesign \
    python3-devel \
    python3-pip \
    rpm-devel \
    sbsigntools \
    sigul \
    sigul-bridge \
    sigul-server \
    softhsm

# Not packaged for fedora, needed for the server. Requires pip and gcc
RUN pip install rpm-head-signing

RUN mkdir -p /srv/siguldry && chown sigul:sigul /srv/siguldry
WORKDIR /srv/siguldry

COPY devel/local/bridge.conf /etc/sigul/bridge.conf
COPY devel/local/server.conf /etc/sigul/server.conf
COPY devel/local/client.conf /etc/sigul/client.conf
COPY devel/github /etc/sigul-pesign-bridge-ci
COPY devel/startup_wrapper.sh /usr/local/bin/sigul_wrapper
COPY devel/setup_hsm.sh /usr/local/bin/setup_hsm
COPY devel/sigul_auth_keys.sh /usr/local/bin/sigul_auth_keys
COPY devel/0001-Enable-debug-logging-to-console.patch /srv/siguldry/0001-Enable-debug-logging-to-console.patch

# Sets up a CA and client certs for auth between the server, bridge, and client
RUN /usr/local/bin/sigul_auth_keys /var/lib/sigul

# The sigul server crashes if you don't create its keys directory.
RUN mkdir -p /var/lib/sigul/keys
RUN chown -R sigul:sigul /var/lib/sigul/

# It's a gross little hack, but we copy in the example PE executable rather than dealing
# with not having rustup in EL9 repos and getting additional targets installed.
#
# This needs to be built with 'cargo build --target x86_64-unknown-uefi -p sample-uefi'
RUN mkdir -p target/x86_64-unknown-uefi/debug/
COPY target/x86_64-unknown-uefi/debug/sample-uefi.efi target/x86_64-unknown-uefi/debug/sample-uefi.efi

# Fix pesign in Sigul
RUN curl -sL \
	https://pagure.io/sigul/pull-request/29.patch \
	| patch /usr/share/sigul/server.py

# Support PKCS11 signing
RUN curl -sL \
	https://pagure.io/sigul/pull-request/31.patch \
	| patch -d /usr/share/sigul/ && \
	chmod +x /usr/share/sigul/server_add_pkcs11_token.py

RUN patch -d /usr/share/sigul/ < /srv/siguldry/0001-Enable-debug-logging-to-console.patch

RUN sigul_server_create_db
# The nss password needs to be in the sigul-server.conf since it's sourced from there
RUN printf "my-admin-password\0" | sigul_server_add_admin --batch --name=sigul-client
RUN mkdir ~/.sigul/ && cp -r /var/lib/sigul ~/.sigul/sigul

# Set up a software HSM with Secure Boot keys to use in the Sigul server
RUN setup_hsm

# A hacky work-around for GitHub actions not letting you specify the entrypoint for a container
ENTRYPOINT /usr/local/bin/sigul_wrapper

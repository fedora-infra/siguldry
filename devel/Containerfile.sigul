# Available from quay.io/jeremycline/sigul-pesign-bridge-ci:latest
#
# To use this, start a client container in the same network as the bridge and server:
#
#   $ podman compose up -d
#   $ podman run --name sigul-client --network sigul-pesign-client_default --rm -it \
#       quay.io/jeremycline/sigul-pesign-bridge-ci:latest
#   # sigul_key_setup
#   # printf "my-signing-password\0" | sigul --batch -v -v sign-pe -o grub.signed.efi \
#       signing-key codesigning grubx64.efi

FROM quay.io/almalinuxorg/almalinux:9

RUN dnf install -y epel-release
RUN dnf install -y \
    sigul \
    sigul-bridge \
    sigul-server \
    pesign \
    patch \
    python3-pip \
    python3-devel \
    rpm-devel \
    gcc \
    cargo \
    sbsigntools \
    iproute

# Not packaged for fedora, needed for the server. Requires pip and gcc
RUN pip install rpm-head-signing

# Fix pesign in Sigul
RUN curl -sL \
	https://pagure.io/fork/jcline/sigul/c/5b160415b77d40ea80aeb9d9eb1a8c9ec6cf1926.patch \
	| patch /usr/share/sigul/server.py

RUN mkdir -p /srv/siguldry && chown sigul:sigul /srv/siguldry
WORKDIR /srv/siguldry

RUN echo "my-nss-password" > nss_db_password
RUN echo "this is a noise file to generate a key from, but we don't care about it being secure" > seed_file
RUN certutil -z ./seed_file -d /var/lib/sigul -N -f nss_db_password
RUN certutil -z ./seed_file -d /var/lib/sigul -S -f nss_db_password -n my-ca -s 'CN=My CA' -t CT,, -x -v 120
RUN certutil -z ./seed_file -d /var/lib/sigul -S -f nss_db_password -n sigul-bridge -s 'CN=sigul-bridge' -c my-ca -t u,, -v 120
RUN certutil -z ./seed_file -d /var/lib/sigul -S -f nss_db_password -n sigul-server -s 'CN=sigul-server' -c my-ca -t u,, -v 120
RUN certutil -z ./seed_file -d /var/lib/sigul -S -f nss_db_password -n sigul-client -s 'CN=sigul-client' -c my-ca -t u,, -v 120
# The sigul server crashes if you don't create its keys directory.
RUN mkdir -p /var/lib/sigul/keys
RUN chown -R sigul:sigul /var/lib/sigul/
COPY devel/sigul-bridge.conf /etc/sigul/bridge.conf
COPY devel/sigul-server.conf /etc/sigul/server.conf
COPY devel/sigul-client.conf /etc/sigul/client.conf
COPY devel/sigul_key_setup.sh /usr/local/bin/sigul_key_setup
COPY devel/startup_wrapper.sh /usr/local/bin/sigul_wrapper

# It's a gross little hack, but we copy in the example PE executable rather than dealing
# with not having rustup in EL9 repos and getting additional targets installed.
#
# This needs to be built with 'cargo build --target x86_64-unknown-uefi -p sample-uefi'
RUN mkdir -p target/x86_64-unknown-uefi/debug/
COPY target/x86_64-unknown-uefi/debug/sample-uefi.efi target/x86_64-unknown-uefi/debug/sample-uefi.efi

RUN sigul_server_create_db
# The nss password needs to be in the sigul-server.conf since it's sourced from there
RUN printf "my-admin-password\0" | sigul_server_add_admin --batch --name=sigul-client
RUN mkdir ~/.sigul/ && cp -r /var/lib/sigul ~/.sigul/sigul

# A hacky work-around for GitHub actions not letting you specify the entrypoint for a container
ENTRYPOINT /usr/local/bin/sigul_wrapper
